TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {  
        // Start typing your C/C++ solution below  
        // DO NOT write int main() function  
        if (preorder.size() <= 0)  
            return NULL;  
              
        if (preorder.size() != inorder.size())  
            return NULL;  
              
        TreeNode* root = new TreeNode(0);  
        root = buildTree(preorder, 0, preorder.size()-1, inorder,0, preorder.size()-1);  
          
        return root;  
    }  
      
      
    TreeNode* buildTree(vector<int> &preorder, int preStart, int preEnd, vector<int> &inorder, int inStart, int inEnd){  
        if (preEnd < preStart )  
            return NULL;  
              
        TreeNode* root = new TreeNode(0);  
        root->val = preorder.at(preStart);  
        if (preEnd== preStart)      
            return root;  
              
        int i;  
        for(i = 0; i < inorder.size(); i++){  
            if (inorder.at(inStart+i) == root->val)  
                break;  
        }  
          
        root->left  = buildTree(preorder, preStart+1, preStart+i,inorder,inStart, inStart + i-1);  
        root->right = buildTree(preorder, preStart+1+i, preEnd,inorder,inStart+ i+1, inEnd);  
        return root;  
    }  