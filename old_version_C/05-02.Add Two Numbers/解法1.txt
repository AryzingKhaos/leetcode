/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* find(ListNode* head,int i){
        int count=1;
        while(count!=i){
            count++;
            head=head->next;
        }
        return head;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int count=0;
        ListNode* head1=l1;
        ListNode* temp;
        ListNode* tail2;
        int i=0,sum=0;
        while(l1->next!=NULL){
            count++;
            l1=l1->next;
        }
        l1=head1;
        for(i=count;i>=0;i--){
            temp=find(l1,i);
            if(l2){
                temp->val=temp->val+l2->val;
            }
            if(temp->val>9&&i!=0){
                temp->val=temp->val%10;
                if(l2){//因为temp肯定是存在的，所以只要确定是存在的就行。
                    l2->next->val+=1;
                }else{
                    tail2=(ListNode*)malloc(sizeof(ListNode));
                    tail2->val=1;
                    l2->next=tail2;
                }
            }
            if(temp->val>9&&i==0){
                l1=(ListNode*)malloc(sizeof(ListNode));
                l1->val=1;
                l1->next=head1;
            }
            l2=l2->next;
        }
        return l1;
    }
};