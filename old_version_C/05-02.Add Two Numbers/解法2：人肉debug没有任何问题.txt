/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverseList(ListNode* head) {
        ListNode* mid=head;
        ListNode* tail=head;
        if(head==NULL||head->next==NULL) return head;//没有结点或者只有一个结点
        head=head->next;
        
        if(head->next==NULL){//只有两个结点
            head->next=tail;
            tail->next=NULL;
            return head;
        }else{
            head=head->next;
            mid=tail->next;
            tail->next=NULL;
        }
        
        while(head){
            mid->next=tail;
            tail=mid;
            mid=head;
            head=head->next;
        }
        
        mid->next=tail;
        return mid;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1=reverseList(l1);
        ListNode* head=l1;
        while(l1&&l2){
                l1->val+=l2->val;
                
                if(l1->val>9) {
                    l1->val%=10;
                    if(l1->next){
                        l1->next->val+=1;
                    }else{
                        l1->next=new ListNode(1);
                    }
                }
                if((l1->next)&&(!l2->next)){
                    break;
                }else if(!l1->next&&l2->next){
                    l1->next=new ListNode(0);
                    l1=l1->next;
                    l2=l2->next;
                }else if(!l1->next&&!l2->next){
                    break;
                }else{
                    l1=l1->next;
                    l2=l2->next;
                }
        }
        return head;
    }
};